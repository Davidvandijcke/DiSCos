comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
eval=FALSE, # dont rerun vignette when building package
out.width = '100%',
dpi = 144
)
data("dube")
head(dube)
id_col.target <- 2
t0 <- 2003
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 5, permutation = TRUE, CI = TRUE, boots = 100, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9)
discot <- DiSCoTEA(disco,  agg="quantileDiff", graph=TRUE)
summary(discot)
discot <- DiSCoTEA(disco,  agg="quantileDiff", graph=TRUE, ylim=c(-100,0.2))
summary(discot)
plot(disco$CI$quantile_diff$lower)
plot(disco$CI$quantile_diff$se)
plot(disco$CI$bootmat)
plot(disco$CI$bootmat$quantile_diff[,t,])
plot(disco$CI$bootmat$quantile_diff[,1,])
dim(disco$CI$bootmat$quantile_diff)
dim(disco$CI$bootmat$quantile_diff[.2])
dim(disco$CI$bootmat$quantile_diff[,2,])
plot(disco$CI$bootmat$quantile_diff[,2,])
plot(disco$CI$bootmat$quantile_diff[,2,1])
plot(disco$CI$bootmat$quantile_diff[,2,2])
plot(disco$CI$bootmat$quantile_diff[,2,3])
plot(disco$CI$bootmat$cdf_diff[,2,3])
plot(disco$CI$bootmat$quantile[,2,1])
discot <- DiSCoTEA(disco,  agg="quantile", graph=TRUE)
summary(discot)
discot <- DiSCoTEA(disco,  agg="cdf", graph=TRUE)
summary(discot)
treats <- list()
treats_boot <- list()
target_qtiles <- list()
grid <- evgrid
# reconstruct some parameters
df <- disco$params$df
t_max <- max(df$time_col)
t_min <- min(df$time_col)
t0 <- disco$params$t0
T0 <- unique(df[time_col == t0]$time_col)  - t_min
T_max <- max(df$time_col) - t_min + 1
CI <- disco$params$CI
cl <- disco$params$cl
evgrid = seq(from=0,to=1,length.out=disco$params$G+1)
qmethod <- disco$params$qmethod
q_min <- disco$params$q_min
q_max <- disco$params$q_max
t_start <- t_min
T_start <- 1
if (is.null(t_plot)) t_plot <- t_start:t_max
t_plot <- NULL
savePlots <- FALSE
xlim <- NULL
ylim <- NULL
samples <- c(0.25)
# reconstruct some parameters
df <- disco$params$df
t_max <- max(df$time_col)
t_min <- min(df$time_col)
t0 <- disco$params$t0
T0 <- unique(df[time_col == t0]$time_col)  - t_min
T_max <- max(df$time_col) - t_min + 1
CI <- disco$params$CI
cl <- disco$params$cl
evgrid = seq(from=0,to=1,length.out=disco$params$G+1)
qmethod <- disco$params$qmethod
q_min <- disco$params$q_min
q_max <- disco$params$q_max
t_start <- t_min
T_start <- 1
if (is.null(t_plot)) t_plot <- t_start:t_max
##  calculate quantile treatment effects
qtiles_centered <- lapply(T_start:T_max,
function(x) disco$results.periods[[x]]$target$quantiles -  disco$results.periods[[x]]$DiSCo$quantile )
if (CI) { # calculate CI quantile treatment effects
qtiles_centered_boot <- lapply(T_start:T_max, function(x) disco$results.periods[[x]]$target$quantiles - disco$results.periods[[x]]$DiSCo$CI$bootmat)
qtiles_boot <- lapply(T_start:T_max,
function(x) disco$results.periods[[x]]$DiSCo$CI$bootmat)
}
target_qtiles <- lapply(T_start:T_max,
function(x) disco$results.periods[[x]]$target$quantiles)
## calculate quantiles
qtiles <- lapply(T_start:T_max,
function(x) disco$results.periods[[x]]$DiSCo$quantile)
target_qtiles <- lapply(T_start:T_max,
function(x) disco$results.periods[[x]]$target$quantiles)
treats <- list()
treats_boot <- list()
target_cdf <- list()
# get treatment effects
for (i in 1:length(disco$results.periods)) {
grid <- disco$results.periods[[i]]$target$grid
treats[[i]]  <- stats::ecdf(disco$results.periods[[i]]$DiSCo$quantile)(grid)
target_cdf[[i]] <- stats::ecdf(disco$results.periods[[i]]$target$quantile)(grid)
if (CI) treats_boot[[i]] <- disco$CI$bootmat$cdf[,i,] # need to grab from the bootmat
}
if (CI){
sds <- lapply(1:T_max, function(t) disco$CI[[agg]]$sd[,t])
ci_lower <- lapply(1:T_max, function(t) disco$CI[[agg]]$lower[,t])
ci_upper <- lapply(1:T_max, function(t) disco$CI[[agg]]$upper[,t])
} else {
sds <- NA
ci_lower <- NA
ci_upper <- NA
}
agg <- "cdf"
treats <- list()
treats_boot <- list()
target_cdf <- list()
# get treatment effects
for (i in 1:length(disco$results.periods)) {
grid <- disco$results.periods[[i]]$target$grid
treats[[i]]  <- stats::ecdf(disco$results.periods[[i]]$DiSCo$quantile)(grid)
target_cdf[[i]] <- stats::ecdf(disco$results.periods[[i]]$target$quantile)(grid)
if (CI) treats_boot[[i]] <- disco$CI$bootmat$cdf[,i,] # need to grab from the bootmat
}
if (CI){
sds <- lapply(1:T_max, function(t) disco$CI[[agg]]$sd[,t])
ci_lower <- lapply(1:T_max, function(t) disco$CI[[agg]]$lower[,t])
ci_upper <- lapply(1:T_max, function(t) disco$CI[[agg]]$upper[,t])
} else {
sds <- NA
ci_lower <- NA
ci_upper <- NA
}
if (is.null(xlim)) xlim <- c(min(grid), max(grid))
if (graph) {
p <- plotDistOverTime(treats, grid, t_start, t_max, CI, ci_lower, ci_upper, savePlots=savePlots, plotName=agg,
obsLine = target_cdf, xlab="Y", ylab="CDF", lty=1, lty_obs=2, xlim=xlim, t_plot=t_plot)
}
graph<-TRUE
treats <- list()
treats_boot <- list()
target_cdf <- list()
# get treatment effects
for (i in 1:length(disco$results.periods)) {
grid <- disco$results.periods[[i]]$target$grid
treats[[i]]  <- stats::ecdf(disco$results.periods[[i]]$DiSCo$quantile)(grid)
target_cdf[[i]] <- stats::ecdf(disco$results.periods[[i]]$target$quantile)(grid)
if (CI) treats_boot[[i]] <- disco$CI$bootmat$cdf[,i,] # need to grab from the bootmat
}
if (CI){
sds <- lapply(1:T_max, function(t) disco$CI[[agg]]$sd[,t])
ci_lower <- lapply(1:T_max, function(t) disco$CI[[agg]]$lower[,t])
ci_upper <- lapply(1:T_max, function(t) disco$CI[[agg]]$upper[,t])
} else {
sds <- NA
ci_lower <- NA
ci_upper <- NA
}
if (is.null(xlim)) xlim <- c(min(grid), max(grid))
if (graph) {
p <- plotDistOverTime(treats, grid, t_start, t_max, CI, ci_lower, ci_upper, savePlots=savePlots, plotName=agg,
obsLine = target_cdf, xlab="Y", ylab="CDF", lty=1, lty_obs=2, xlim=xlim, t_plot=t_plot)
}
treats <- list()
treats_boot <- list()
target_qtiles <- list()
grid <- evgrid
# get treatment effects
for (i in 1:length(disco$results.periods)) { # TODO: left off here
c_qtile <- disco$results.periods[[i]]$DiSCo$quantile
t_qtile <- disco$results.periods[[i]]$target$quantile
treats[[i]] <- c_qtile
target_qtiles[[i]] <- t_qtile
if (CI) treats_boot[[i]] <- disco$CI$bootmat$quantile[,i,]  # need to grab from the bootmat
}
if (CI) {
sds <- lapply(1:T_max, function(t) disco$CI[[agg]]$sd[,t])
ci_lower <- lapply(1:T_max, function(t) disco$CI[[agg]]$lower[,t])
ci_upper <- lapply(1:T_max, function(t) disco$CI[[agg]]$upper[,t])
} else {
sds <- NA
ci_lower <- NA
ci_upper <- NA
}
if (graph) {
if (is.null(ylim)) {
ymin <- quantile(unlist(treats), 0.01)
ymax <- quantile(unlist(treats), 0.99)
ylim <- c(ymin, ymax)
}
if (is.null(xlim)) {
xmin <- quantile(unlist(grid), 0.01)
xmax <- quantile(unlist(grid), 0.99)
xlim <- c(xmin, xmax)
}
p <- plotDistOverTime(treats, grid, t_start, t_max, CI, ci_lower, ci_upper, ylim=ylim, xlab="Quantile",
ylab="Treatment Effect", cdf=FALSE, obsLine = target_qtiles, savePlots=savePlots, plotName=agg, t_plot=t_plot)
}
treats <- list()
treats_boot <- list()
target_qtiles <- list()
grid <- evgrid
# get treatment effects
for (i in 1:length(disco$results.periods)) { # TODO: left off here
c_qtile <- disco$results.periods[[i]]$DiSCo$quantile
t_qtile <- disco$results.periods[[i]]$target$quantile
treats[[i]] <- c_qtile
target_qtiles[[i]] <- t_qtile
if (CI) treats_boot[[i]] <- disco$CI$bootmat$quantile[,i,]  # need to grab from the bootmat
}
if (CI) {
sds <- lapply(1:T_max, function(t) disco$CI[[agg]]$sd[,t])
ci_lower <- lapply(1:T_max, function(t) disco$CI[[agg]]$lower[,t])
ci_upper <- lapply(1:T_max, function(t) disco$CI[[agg]]$upper[,t])
} else {
sds <- NA
ci_lower <- NA
ci_upper <- NA
}
if (graph) {
if (is.null(ylim)) {
ymin <- quantile(unlist(treats), 0.01)
ymax <- quantile(unlist(treats), 0.99)
ylim <- c(ymin, ymax)
}
if (is.null(xlim)) {
xmin <- quantile(unlist(grid), 0.01)
xmax <- quantile(unlist(grid), 0.99)
xlim <- c(xmin, xmax)
}
p <- plotDistOverTime(treats, grid, t_start, t_max, CI, ci_lower, ci_upper, ylim=ylim, xlab="Quantile",
ylab="Treatment Effect", cdf=FALSE, obsLine = target_qtiles, savePlots=savePlots, plotName=agg, t_plot=t_plot)
}
length(rep(grid_cdf, times = length(cdf_centered)))
grid_Cdf
grid_cdf
length(grid)
length(treats)
length(treats[[1]])
length(ci_lower)
length(ci_lower[[1]])
agg <- "quantile"
treats <- list()
treats_boot <- list()
target_qtiles <- list()
grid <- evgrid
# get treatment effects
for (i in 1:length(disco$results.periods)) { # TODO: left off here
c_qtile <- disco$results.periods[[i]]$DiSCo$quantile
t_qtile <- disco$results.periods[[i]]$target$quantile
treats[[i]] <- c_qtile
target_qtiles[[i]] <- t_qtile
if (CI) treats_boot[[i]] <- disco$CI$bootmat$quantile[,i,]  # need to grab from the bootmat
}
if (CI) {
sds <- lapply(1:T_max, function(t) disco$CI[[agg]]$sd[,t])
ci_lower <- lapply(1:T_max, function(t) disco$CI[[agg]]$lower[,t])
ci_upper <- lapply(1:T_max, function(t) disco$CI[[agg]]$upper[,t])
} else {
sds <- NA
ci_lower <- NA
ci_upper <- NA
}
if (graph) {
if (is.null(ylim)) {
ymin <- quantile(unlist(treats), 0.01)
ymax <- quantile(unlist(treats), 0.99)
ylim <- c(ymin, ymax)
}
if (is.null(xlim)) {
xmin <- quantile(unlist(grid), 0.01)
xmax <- quantile(unlist(grid), 0.99)
xlim <- c(xmin, xmax)
}
p <- plotDistOverTime(treats, grid, t_start, t_max, CI, ci_lower, ci_upper, ylim=ylim, xlab="Quantile",
ylab="Treatment Effect", cdf=FALSE, obsLine = target_qtiles, savePlots=savePlots, plotName=agg, t_plot=t_plot)
}
ylim <- c(0,25)
treats <- list()
treats_boot <- list()
target_qtiles <- list()
grid <- evgrid
# get treatment effects
for (i in 1:length(disco$results.periods)) { # TODO: left off here
c_qtile <- disco$results.periods[[i]]$DiSCo$quantile
t_qtile <- disco$results.periods[[i]]$target$quantile
treats[[i]] <- c_qtile
target_qtiles[[i]] <- t_qtile
if (CI) treats_boot[[i]] <- disco$CI$bootmat$quantile[,i,]  # need to grab from the bootmat
}
if (CI) {
sds <- lapply(1:T_max, function(t) disco$CI[[agg]]$sd[,t])
ci_lower <- lapply(1:T_max, function(t) disco$CI[[agg]]$lower[,t])
ci_upper <- lapply(1:T_max, function(t) disco$CI[[agg]]$upper[,t])
} else {
sds <- NA
ci_lower <- NA
ci_upper <- NA
}
if (graph) {
if (is.null(ylim)) {
ymin <- quantile(unlist(treats), 0.01)
ymax <- quantile(unlist(treats), 0.99)
ylim <- c(ymin, ymax)
}
if (is.null(xlim)) {
xmin <- quantile(unlist(grid), 0.01)
xmax <- quantile(unlist(grid), 0.99)
xlim <- c(xmin, xmax)
}
p <- plotDistOverTime(treats, grid, t_start, t_max, CI, ci_lower, ci_upper, ylim=ylim, xlab="Quantile",
ylab="Treatment Effect", cdf=FALSE, obsLine = target_qtiles, savePlots=savePlots, plotName=agg, t_plot=t_plot)
}
discot <- DiSCoTEA(disco,  agg="quantileDiff", graph=TRUE)
summary(discot)
discot <- DiSCoTEA(disco,  agg="quantileDiff", graph=TRUE, ylim=c(-100,0))
summary(discot)
discot <- DiSCoTEA(disco,  agg="cdfDiff", graph=TRUE, ylim=c(-100,0))
summary(discot)
discot <- DiSCoTEA(disco,  agg="cdfDiff", graph=TRUE, ylim=c(0,25))
summary(discot)
discot <- DiSCoTEA(disco,  agg="cdfDiff", graph=TRUE)
summary(discot)
discot <- DiSCoTEA(disco,  agg="cdfDiff", graph=TRUE, ylim=c(0,10))
summary(discot)
discot <- DiSCoTEA(disco,  agg="cdfDiff", graph=TRUE, ylim=c(0,2))
summary(discot)
list <- c(1,2,4,5,6)
list[1,1,1]
list[c(1,1,1)]
list[c(1,3,1)]
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 5, permutation = TRUE, CI = TRUE, boots = 100, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9, mixture=TRUE)
discot <- DiSCoTEA(disco,  agg="quantileDiff", graph=TRUE, ylim=c(0,2))
summary(discot)
discot <- DiSCoTEA(disco,  agg="cdf", graph=TRUE, ylim=c(0,2))
summary(discot)
discot <- DiSCoTEA(disco,  agg="cdfDiff", graph=TRUE)
summary(discot)
devtools::load_all()
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 5, permutation = TRUE, CI = TRUE, boots = 100, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9)
discot <- DiSCoTEA(disco,  agg="quantileDiff", graph=TRUE)
summary(discot)
devtools::load_all()
id_col.target <- 2
t0 <- 2003
# load datadf <- copy(dube)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 5, permutation = TRUE, CI = TRUE, boots = 100, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9)
id_col.target <- 2
t0 <- 2003
# load datadf <- copy(dube)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 5, permutation = TRUE, CI = TRUE, boots = 100, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9)
id_col.target <- 2
t0 <- 2003
id_col.target <- 2
t0 <- 2003
# load datadf <- copy(dube)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1,
permutation = TRUE, CI = TRUE, boots = 100, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9)
devtools::load_all()
id_col.target <- 2
t0 <- 2003
# load datadf <- copy(dube)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1,
permutation = TRUE, CI = TRUE, boots = 100, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 5,
permutation = TRUE, CI = TRUE, boots = 100, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9)
discot <- DiSCoTEA(disco,  agg="quantileDiff", graph=TRUE)
discot <- DiSCoTEA(disco,  agg="quantile", graph=TRUE)
plot(disco$CI$bootmat$quantile_diff[,1])
plot(disco$CI$bootmat$quantile_diff[,1,])
plot(disco$CI$bootmat$quantile_diff[,1,1])
plot(disco$CI$bootmat$quantile_diff[,1,10])
devtools::load_all()
id_col.target <- 2
t0 <- 2003
# load datadf <- copy(dube)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 5,
permutation = TRUE, CI = TRUE, boots = 100, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9)
discot <- DiSCoTEA(disco,  agg="quantileDiff", graph=TRUE)
citation("DiSCos")
citation("dplyr")
?citation
??citation
utils::citation("DiSCos")
install.packages("DiSCos")
install.packages("DiSCos")
library(DiSCos)
utils::citation("DiSCos")
devtools::document()
knitr::opts_chunk$set(
comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
eval=FALSE, # dont rerun vignette when building package
out.width = '100%',
dpi = 144
)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 5, permutation = TRUE, CI = TRUE, boots = 1000, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9)
id_col.target <- 2
t0 <- 2003
?DiSCo
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 5, permutation = TRUE, CI = TRUE, boots = 1000, graph = TRUE, simplex=TRUE, seed=1, q_max=0.9)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# retrieve the weights
weights <- disco$weights
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
state.fips <- as.data.table(maps::state.fips)
state.fips <- state.fips[!duplicated(state.fips$abb), c("fips", "abb")]
weights_df <- merge(weights_df, state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df[1:10,])
?DiSCo
summary(disco$perm)
discot <- DiSCoTEA(disco,  agg="quantileDiff", graph=TRUE)
summary(discot)
?DiSCoTEA
discot <- DiSCoTEA(disco,  agg="cdfDiff", graph=TRUE, ylim=c(-0.05, 0.05))
summary(discot)
stats::ecdf(disco$results.periods$`2000`$target$quantiles)(3.5)
disco <- DiSCo(dube, id_col.target=id_col.target, t0=t0, G = 1000, num.cores = 5, permutation = TRUE, CI = TRUE, boots = 1000, graph = FALSE, q_min = 0, q_max=0.65, seed=1, simplex=TRUE)
discot <- DiSCoTEA(disco, agg="quantileDiff", graph=TRUE)
summary(discot)
discot <- DiSCoTEA(disco, agg="cdfDiff", graph=TRUE, ylim=c(-0.05,0.05))
summary(discot)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::test()
devtools::build()
devtools::test()
devtools::build()
rhub::check_for_cran()
rhub::check_for_cran)
rhub::check_for_cran()
?check_for_cran
devtools::check_rhub()
update.packages("curl")
update.packages(ask = FALSE)
install.packages(c("curl", "httr"))
install.packages(c("curl", "httr"))
rhub::check_for_cran()
set_config(config(ssl_verifypeer = 0L))
library(httr)
set_config(config(ssl_verifypeer = 0L))
rhub::check_for_cran()
rhub::rhub_setup()
install.packages("rhub")
install.packages("rhub")
library(rhub)
rhub::rhub_setup()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_doctor()
rhub::rhub_doctor()
rhub::rhub_check()
rhub::rhub_setup()
rhub::rhub_check()
devtools::build()
library(DiSCos)
?DiSCo
?DiSCo_CI
?DiSCo
devtools::install()
library(DiSCos)
?DiSCo
devtools::document()
devtools::install()
library(DiSCos)
?DiSCo
devtools::document()
devtools::document()
devtools::install()
?DiSCo
?DiSCo
library(DiSCos)
?DiSCo
devtools::build()
devtools::build()
install.packages("devtools")
devtools::build()
devtools::install()
devtools::build()
devtools::build()
rhub::check_cran()
install.packages("rhub")
rhub::check_cran()
?checkCRAN
devtools::check_cran()
?checkCRAN
??check_cran
utils::checkCRAN()
