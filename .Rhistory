if (!require("pacman")) install.packages("pacman")
pacman::p_load(char = packages_load, character.only = TRUE)
# Set the working directory
setwd(file.path(here::here()))
df <- read_dta(file.path("data", "mw_annual_lagsleads_1974_2014.dta"))
years.aff <- list()
for (ii in unique(df$state_fips)){
hh <- df$mw[df$state_fips==ii & df$year>=1996]
hh.diff <- diff(hh)
# getting the years for which the difference is 0
years.help <- df$year[df$state_fips==ii & df$year>=1996]
years.aff[[ii]] <- years.help[which(hh.diff==0)]
}
# AK is our treated unit. We want states that did not have a change between 1998 and 2003/2004
states.aff <- list()
for (ii in 1:length(years.aff)){
dummyvec <- c(1998,1999,2000,2001,2002,2003,2004)
test <- intersect(dummyvec,years.aff[[ii]])
states.aff[[ii]] <- FALSE
if (length(dummyvec) == length(test)){
if (all(dummyvec == test) == TRUE) {
states.aff[[ii]] <- TRUE
}
}
}
control.states <- which(states.aff == TRUE)
control.states
# dropping the data-set for obtaining the control states and loading the actual data
rm(df, states.aff,years.aff, dummyvec,hh,hh.diff,ii,test,years.help)
# load the data from the stata file
fn <- file.path("data", "march_regready_1996.dta")
df <- read_dta(fn)  %>% setDT()
# only considering individuals under the age of 65
df <- df[demgroup1 == 1]
df <- df[year %between% c(1998, 2004)]
# collapsing the data
df[,.(adj0contpov=mean(adj0contpov)),
by=c('state_fips', 'year', 'hhseq')]
dube <- df[, c("adj0contpov", "state_fips", "year")]
fips.target <- 2
dube <- dube[state_fips %in% c(fips.target, control.states)]
dube[, id_col := state_fips]
# create t_col starting at 1 and increasing by 1 for each year
dube[, time_col := year]
dube[, y_col := adj0contpov]
dube <- dube[, c("time_col", "id_col", "y_col")]
summary(dube$y_col)
summary(dube$time_col)
# load the data from the stata file
fn <- file.path("data", "march_regready_1996.dta")
df <- read_dta(fn)  %>% setDT()
# only considering individuals under the age of 65
df <- df[demgroup1 == 1]
df <- df[year %between% c(1998, 2004)]
# collapsing the data
df[,.(adj0contpov=mean(adj0contpov)),
by=c('state_fips', 'year', 'hhseq')]
dube <- df[, c("adj0contpov", "state_fips", "year")]
fips.target <- 2
# dube <- dube[state_fips %in% c(fips.target, control.states)]
dube[, id_col := state_fips]
# create t_col starting at 1 and increasing by 1 for each year
dube[, time_col := year]
dube[, y_col := adj0contpov]
summary(df$y_col)
dube <- dube[, c("time_col", "id_col", "y_col")]
summary(dube$y_col)
set.seed(186900)
disco <- DiSCo(dube, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = TRUE, boots = 2, graph = TRUE, simplex=TRUE, seed=108690)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
set.seed(1860)
disco <- DiSCo(dube, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = TRUE, boots = 2, graph = TRUE, simplex=TRUE, seed=1860)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
devtools::load_all()
knitr::opts_chunk$set(
comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
out.width = '100%',
dpi = 144
)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)# library(CVXR)
library(pracma)
library(quadprog)
library(parallel)
library(stats)
library(maps)
library(data.table)
knitr::opts_chunk$set(
comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
out.width = '100%',
dpi = 144
)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)# library(CVXR)
library(pracma)
library(quadprog)
library(parallel)
library(stats)
library(maps)
library(data.table)
library(CVXR)
library(DiSCo)
library(ggplot2)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)
data("dube")
head(dube)
id_col.target <- 2
t0 <- 2003
set.seed(1860)
disco <- DiSCo(dube, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = TRUE, boots = 2, graph = TRUE, simplex=TRUE)
devtools::load_all()
set.seed(1860)
disco <- DiSCo(dube, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = TRUE, boots = 2, graph = TRUE, simplex=TRUE)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
sort(disco$results.periods[[1]]$DiSCo$weights)
sum(disco$results.periods[[1]]$DiSCo$weights)
controls
disco$results.periods[[1]]$controls$data
disco$results.periods[[1]]$controls$data[[1]]
control_ids
controls_id
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
controls
# create a column for the normalized time period
t_min <- min(df$time_col)
df <- dube
# create a column for the normalized time period
t_min <- min(df$time_col)
df[, t_col := time_col - t_min + 1]
T0 <- unique(df[time_col == t0]$t_col)  - 1
T_max <- max(df$t_col)
T0
t_min
table(df[,c("time_col", "id_col")])
df[id_col == 1 & time_col==1998]
summary(df[id_col == 1 & time_col==1998])
summary(df[id_col == 3 & time_col==1998])
summary(df[id_col == 2 & time_col==1998])
devtools::load_all()
devtools::load_all()
knitr::opts_chunk$set(
comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
out.width = '100%',
dpi = 144
)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)# library(CVXR)
library(pracma)
library(quadprog)
library(parallel)
library(stats)
library(maps)
library(data.table)
library(CVXR)
library(DiSCo)
library(ggplot2)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)
data("dube")
head(dube)
id_col.target <- 2
t0 <- 2003
devtools::load_all()
knitr::opts_chunk$set(
comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
out.width = '100%',
dpi = 144
)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)# library(CVXR)
library(pracma)
library(quadprog)
library(parallel)
library(stats)
library(maps)
library(data.table)
library(CVXR)
library(DiSCo)
library(ggplot2)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)
data("dube")
head(dube)
id_col.target <- 2
t0 <- 2003
set.seed(1860)
disco <- DiSCo(dube, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = TRUE, boots = 2, graph = TRUE, simplex=TRUE)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
sort(disco$results.periods[[1]]$DiSCo$weights)
sort(disco$results.periods[[2]]$DiSCo$weights)
devtools::load_all()
set.seed(1860)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = TRUE, boots = 2, graph = TRUE, simplex=TRUE)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
knitr::opts_chunk$set(
comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
out.width = '100%',
dpi = 144
)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)# library(CVXR)
library(pracma)
library(quadprog)
library(parallel)
library(stats)
library(maps)
library(data.table)
library(CVXR)
library(DiSCo)
library(ggplot2)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)
data("dube")
head(dube)
id_col.target <- 2
t0 <- 2003
knitr::opts_chunk$set(
comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
out.width = '100%',
dpi = 144
)
set.seed(1860)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = FALSE, boots = 2, graph = TRUE, simplex=TRUE)
devtools::load_all()
set.seed(1860)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = FALSE, boots = 2, graph = TRUE, simplex=TRUE)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
set.seed(1860)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = FALSE, boots = 2, graph = TRUE, simplex=TRUE, seed=1860)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
devtools::load_all()
devtools::load_all()
knitr::opts_chunk$set(
comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
out.width = '100%',
dpi = 144
)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)# library(CVXR)
library(pracma)
library(quadprog)
library(parallel)
library(stats)
library(maps)
library(data.table)
library(CVXR)
library(DiSCo)
library(ggplot2)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)
data("dube")
head(dube)
id_col.target <- 2
t0 <- 2003
set.seed(1860)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = FALSE, boots = 2, graph = TRUE, simplex=TRUE)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
sort(disco$results.periods[[1]]$disco$weights)
sort(disco$results.periods[[1]]$DiSCo$weights)
knitr::opts_chunk$set(
comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
out.width = '100%',
dpi = 144
)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)# library(CVXR)
library(pracma)
library(quadprog)
library(parallel)
library(stats)
library(maps)
library(data.table)
library(CVXR)
library(DiSCo)
library(ggplot2)
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)
data("dube")
head(dube)
id_col.target <- 2
t0 <- 2003
set.seed(1860)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = FALSE, boots = 2, graph = TRUE, simplex=TRUE)
devtools::load_all()
set.seed(1860)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = FALSE, boots = 2, graph = TRUE, simplex=TRUE)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
set.seed(18600)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = FALSE, boots = 2, graph = TRUE, simplex=TRUE)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
devtools::load_all()
set.seed(186)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = FALSE, boots = 2, graph = TRUE, simplex=TRUE)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
set.seed(1860)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = FALSE, boots = 2, graph = TRUE, simplex=TRUE)
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
knitr::purl("Dube2019.Rmd")
knitr::purl("./vignettes/Dube2019.Rmd")
## ----setup, include = FALSE----------------------------------------------------------------------------------------------------------------------------------
knitr::opts_chunk$set(
comment = "#",
echo=TRUE,
error = FALSE,
tidy = FALSE,
cache = FALSE,
collapse = TRUE,
out.width = '100%',
dpi = 144
)
## ----include=FALSE-------------------------------------------------------------------------------------------------------------------------------------------
# fldr <- here::here("R/")
# sapply(paste0(fldr,list.files(fldr)), source)# library(CVXR)
library(pracma)
library(quadprog)
library(parallel)
library(stats)
library(maps)
library(data.table)
library(CVXR)
library(DiSCo)
library(ggplot2)
## ------------------------------------------------------------------------------------------------------------------------------------------------------------
data("dube")
head(dube)
## ------------------------------------------------------------------------------------------------------------------------------------------------------------
id_col.target <- 2
t0 <- 2003
## ------------------------------------------------------------------------------------------------------------------------------------------------------------
set.seed(1860)
df <- copy(dube)
disco <- DiSCo(df, id_col.target, t0, G = 1000, num.cores = 1, permutation = FALSE, CI = FALSE, boots = 2, graph = TRUE, simplex=TRUE)
## ------------------------------------------------------------------------------------------------------------------------------------------------------------
# retrieve the weights
weights <- disco$Weights_DiSCo_avg
# retrieve the control unit IDs
controls <- disco$control_ids
# store in a dataframe
weights_df <- data.frame(weights = weights, fips = controls)
# merge with state fips codes (built into the maps package)
weights_df <- merge(weights_df, maps::state.fips, by = "fips")
setorder(weights_df, -weights)
print(weights_df)
sort(disco$results.periods[[1]]$DiSCo$weights)
