#' \item{DiSCo}{A list containing the results of the main (DiSCo) method, with the following elements:
#' \itemize{
#' \item{weights}{The optimal weights for the DiSCo method}
#' \item{quantile}{A list containing the quantile functions of the controls and the corresponding barycenter, with the following elements:}
#' \itemize{
#' \item{controls}{A vector containing the quantile functions of the controls}
#' \item{barycenter}{A vector containing the quantile function of the barycenter}
#' }
#' \item{cdf}{The empirical CDFs of the barycenters}
#' }
#' \item{mixture}{A list containing the results of the mixture of distributions approach, with the following elements:
#' \itemize{
#' \item{weights}{The optimal weights for the mixture of distributions approach}
#' \item{distance}{The value of the objective function for the mixture of distributions approach}
#' \item{mean}{The weighted mixture of the controls' CDFs, i.e. the "mixture CDF"}
#' }
#' \item{target}{A list containing the data for the target unit, with the following elements:}
#' \itemize{
#' \item{quantile}{A vector containing the quantile functions of the target}
#' \item{cdf}{A vector containing the empirical CDFs of the target}
#' \item{grid}{A vector containing the grid on which the quantile and CDF functions were evaluated}
#' \item{data}{A vector containing the supplied data for the target unit}
#' }
#' \item{controls}{A list containing the data for the control units, with the following elements:}
#' \itemize{
#' \item{data}{A vector containing the supplied data for the control units}
#' \item{cdf}{A vector containing the empirical CDFs of the controls}
#' \item{id}{A vector containing the IDs of the control units, in the same ordering as the weights returned in the DiSCo and mixture of distributions lists}
#' }
#' }
DiSCo_iter <- function(yy, df, target, M, G, ...) {
# obtaining the target state
# target outcome
target <- df[id_col == target, y_col]
# generate list where each element contains a list of all micro-level outcomes for a control unit
controls <- list()
j <- 1
controls.id <- unique(df[id_col != target_id, id_col])
for (id in controls.id) {
controls[j] <- list(df[id_col == id & t_col == yy, y_col])
j <- j + 1
}
# obtaining the optimal weights for the DiSCo method
DiSCo_res_weights <- DiSCo_weights_reg(controls,as.vector(target), M)
DiSCo_res2 <- DiSCo_bc(controls,DiSCo_res_weights,seq(from=0,to=1,length.out=M+1))
# sample grid
grid <- list(grid.min = NA, grid.max = NA, grid.rand = NA, grid.ord = NA)
grid[c("grid.min", "grid.max", "grid.rand", "grid.ord")] <- getGrid(target, controls, G)
# getting the CDF from the quantile function
DiSCo_res2.cdfF <- ecdf(DiSCo_res2[[2]])
DiSCo_res2.cdf <- DiSCo_res2.cdfF(grid$grid.ord)
# obtaining the optimal weights for the mixture of distributions method
mixture <- getMixture(controls, target, grid$grid.min, grid$grid.max, grid$grid.rand)
y_char <- as.character(yy)
results <- list()
results[["DiSCo"]] <-
list("weights" = DiSCo_res_weights, "quantile" = DiSCo_res2, "cdf" =  DiSCo_res2.cdf) # DiSCo estimator
results[["mixture"]] <- list("weights" = mixture$weights.opt, "distance" = mixture$distance.opt, "mean" = mixture$mean) # mixture of distributions estimator
results[["target"]] <- list("quantile" = target.s, "cdf" = mixture$target.order, "grid" =  grid.ord, "data" = as.vector(target))
results[["controls"]] <- list("data" = controls, "cdf" = mixture$CDF.matrix, "id" = controls.id)
}
results.years <- lapply(sort(unique(df$t_col)), DiSCo_iter, df = df, target = id_col.target, M = M, G = G) #, mc.cores = num.cores)
#' @title DiSCo_iter
#'
#' @description This function implements the DiSCo method for a single time period, as well as the mixture of distributions approach.
#'
#' @details This function is called for every time period in the DiSCo function. It implements the DiSCo method for a single time period, as well as the mixture of distributions approach.
#' The corresponding results for each year can be accessed in the `years` list of the output of the DiSCo function. The DiSCo function returns the average weight for each unit across all years,
#' calculated as a uniform mean, as well as the counterfactual target distribution produced as the weighted average of the control distributions for each year, using these averaged weights.
#'
#' @param c_df List with matrices of control distributions
#' @param t_df Matrix containing the target distribution
#' @param T0 Integer indicating first year of treatment as counted from 1 (e.g, if treatment year 2002 was the 5th year in the sample, this parameter should be 5).
#' @param ww Optional vector of weights indicating the relative importance of each time period. If not specified, each time period is weighted equally.
#' @param peridx Optional integer indicating number of permutations. If not specified, by default equal to the number of units in the sample.
#' @param evgrid Optional vector containing an evenly spaced grid on [0,1] on which the quantile function for the control units will be evaulated.
#' By default, a grid of 100 points is used.
#' @param graph Boolean indicating whether to plot graphs
#' @param y_name Y axis label of the graph
#' @param x_name X axis label of the graph
#' @param num_cores Integer, number of cores to use for parallel computation. Set to 1 by default (sequential computation), this can be very slow!
#' @return A nested list with the following elements:
#' \itemize{
#' \item{DiSCo}{A list containing the results of the main (DiSCo) method, with the following elements:
#' \itemize{
#' \item{weights}{The optimal weights for the DiSCo method}
#' \item{quantile}{A list containing the quantile functions of the controls and the corresponding barycenter, with the following elements:}
#' \itemize{
#' \item{controls}{A vector containing the quantile functions of the controls}
#' \item{barycenter}{A vector containing the quantile function of the barycenter}
#' }
#' \item{cdf}{The empirical CDFs of the barycenters}
#' }
#' \item{mixture}{A list containing the results of the mixture of distributions approach, with the following elements:
#' \itemize{
#' \item{weights}{The optimal weights for the mixture of distributions approach}
#' \item{distance}{The value of the objective function for the mixture of distributions approach}
#' \item{mean}{The weighted mixture of the controls' CDFs, i.e. the "mixture CDF"}
#' }
#' \item{target}{A list containing the data for the target unit, with the following elements:}
#' \itemize{
#' \item{quantile}{A vector containing the quantile functions of the target}
#' \item{cdf}{A vector containing the empirical CDFs of the target}
#' \item{grid}{A vector containing the grid on which the quantile and CDF functions were evaluated}
#' \item{data}{A vector containing the supplied data for the target unit}
#' }
#' \item{controls}{A list containing the data for the control units, with the following elements:}
#' \itemize{
#' \item{data}{A vector containing the supplied data for the control units}
#' \item{cdf}{A vector containing the empirical CDFs of the controls}
#' \item{id}{A vector containing the IDs of the control units, in the same ordering as the weights returned in the DiSCo and mixture of distributions lists}
#' }
#' }
DiSCo_iter <- function(yy, df, target, M, G, ...) {
# obtaining the target state
# target outcome
target <- df[id_col == target, y_col]
# generate list where each element contains a list of all micro-level outcomes for a control unit
controls <- list()
j <- 1
controls.id <- unique(df[id_col != target, id_col])
for (id in controls.id) {
controls[j] <- list(df[id_col == id & t_col == yy, y_col])
j <- j + 1
}
# obtaining the optimal weights for the DiSCo method
DiSCo_res_weights <- DiSCo_weights_reg(controls,as.vector(target), M)
DiSCo_res2 <- DiSCo_bc(controls,DiSCo_res_weights,seq(from=0,to=1,length.out=M+1))
# sample grid
grid <- list(grid.min = NA, grid.max = NA, grid.rand = NA, grid.ord = NA)
grid[c("grid.min", "grid.max", "grid.rand", "grid.ord")] <- getGrid(target, controls, G)
# getting the CDF from the quantile function
DiSCo_res2.cdfF <- ecdf(DiSCo_res2[[2]])
DiSCo_res2.cdf <- DiSCo_res2.cdfF(grid$grid.ord)
# obtaining the optimal weights for the mixture of distributions method
mixture <- getMixture(controls, target, grid$grid.min, grid$grid.max, grid$grid.rand)
y_char <- as.character(yy)
results <- list()
results[["DiSCo"]] <-
list("weights" = DiSCo_res_weights, "quantile" = DiSCo_res2, "cdf" =  DiSCo_res2.cdf) # DiSCo estimator
results[["mixture"]] <- list("weights" = mixture$weights.opt, "distance" = mixture$distance.opt, "mean" = mixture$mean) # mixture of distributions estimator
results[["target"]] <- list("quantile" = target.s, "cdf" = mixture$target.order, "grid" =  grid.ord, "data" = as.vector(target))
results[["controls"]] <- list("data" = controls, "cdf" = mixture$CDF.matrix, "id" = controls.id)
}
results.years <- lapply(sort(unique(df$t_col)), DiSCo_iter, df = df, target = id_col.target, M = M, G = G) #, mc.cores = num.cores)
#' @title DiSCo_iter
#'
#' @description This function implements the DiSCo method for a single time period, as well as the mixture of distributions approach.
#'
#' @details This function is called for every time period in the DiSCo function. It implements the DiSCo method for a single time period, as well as the mixture of distributions approach.
#' The corresponding results for each year can be accessed in the `years` list of the output of the DiSCo function. The DiSCo function returns the average weight for each unit across all years,
#' calculated as a uniform mean, as well as the counterfactual target distribution produced as the weighted average of the control distributions for each year, using these averaged weights.
#'
#' @param c_df List with matrices of control distributions
#' @param t_df Matrix containing the target distribution
#' @param T0 Integer indicating first year of treatment as counted from 1 (e.g, if treatment year 2002 was the 5th year in the sample, this parameter should be 5).
#' @param ww Optional vector of weights indicating the relative importance of each time period. If not specified, each time period is weighted equally.
#' @param peridx Optional integer indicating number of permutations. If not specified, by default equal to the number of units in the sample.
#' @param evgrid Optional vector containing an evenly spaced grid on [0,1] on which the quantile function for the control units will be evaulated.
#' By default, a grid of 100 points is used.
#' @param graph Boolean indicating whether to plot graphs
#' @param y_name Y axis label of the graph
#' @param x_name X axis label of the graph
#' @param num_cores Integer, number of cores to use for parallel computation. Set to 1 by default (sequential computation), this can be very slow!
#' @return A nested list with the following elements:
#' \itemize{
#' \item{DiSCo}{A list containing the results of the main (DiSCo) method, with the following elements:
#' \itemize{
#' \item{weights}{The optimal weights for the DiSCo method}
#' \item{quantile}{A list containing the quantile functions of the controls and the corresponding barycenter, with the following elements:}
#' \itemize{
#' \item{controls}{A vector containing the quantile functions of the controls}
#' \item{barycenter}{A vector containing the quantile function of the barycenter}
#' }
#' \item{cdf}{The empirical CDFs of the barycenters}
#' }
#' \item{mixture}{A list containing the results of the mixture of distributions approach, with the following elements:
#' \itemize{
#' \item{weights}{The optimal weights for the mixture of distributions approach}
#' \item{distance}{The value of the objective function for the mixture of distributions approach}
#' \item{mean}{The weighted mixture of the controls' CDFs, i.e. the "mixture CDF"}
#' }
#' \item{target}{A list containing the data for the target unit, with the following elements:}
#' \itemize{
#' \item{quantile}{A vector containing the quantile functions of the target}
#' \item{cdf}{A vector containing the empirical CDFs of the target}
#' \item{grid}{A vector containing the grid on which the quantile and CDF functions were evaluated}
#' \item{data}{A vector containing the supplied data for the target unit}
#' }
#' \item{controls}{A list containing the data for the control units, with the following elements:}
#' \itemize{
#' \item{data}{A vector containing the supplied data for the control units}
#' \item{cdf}{A vector containing the empirical CDFs of the controls}
#' \item{id}{A vector containing the IDs of the control units, in the same ordering as the weights returned in the DiSCo and mixture of distributions lists}
#' }
#' }
DiSCo_iter <- function(yy, df, id_col.target, M, G, ...) {
# obtaining the target state
# target outcome
target <- df[id_col == id_col.target, y_col]
# generate list where each element contains a list of all micro-level outcomes for a control unit
controls <- list()
j <- 1
controls.id <- unique(df[id_col != id_col.target, id_col])
for (id in controls.id) {
controls[j] <- list(df[id_col == id & t_col == yy, y_col])
j <- j + 1
}
# obtaining the optimal weights for the DiSCo method
DiSCo_res_weights <- DiSCo_weights_reg(controls,as.vector(target), M)
DiSCo_res2 <- DiSCo_bc(controls,DiSCo_res_weights,seq(from=0,to=1,length.out=M+1))
# sample grid
grid <- list(grid.min = NA, grid.max = NA, grid.rand = NA, grid.ord = NA)
grid[c("grid.min", "grid.max", "grid.rand", "grid.ord")] <- getGrid(target, controls, G)
# getting the CDF from the quantile function
DiSCo_res2.cdfF <- ecdf(DiSCo_res2[[2]])
DiSCo_res2.cdf <- DiSCo_res2.cdfF(grid$grid.ord)
# obtaining the optimal weights for the mixture of distributions method
mixture <- getMixture(controls, target, grid$grid.min, grid$grid.max, grid$grid.rand)
y_char <- as.character(yy)
results <- list()
results[["DiSCo"]] <-
list("weights" = DiSCo_res_weights, "quantile" = DiSCo_res2, "cdf" =  DiSCo_res2.cdf) # DiSCo estimator
results[["mixture"]] <- list("weights" = mixture$weights.opt, "distance" = mixture$distance.opt, "mean" = mixture$mean) # mixture of distributions estimator
results[["target"]] <- list("quantile" = target.s, "cdf" = mixture$target.order, "grid" =  grid.ord, "data" = as.vector(target))
results[["controls"]] <- list("data" = controls, "cdf" = mixture$CDF.matrix, "id" = controls.id)
}
#' @title DiSCo_iter
#'
#' @description This function implements the DiSCo method for a single time period, as well as the mixture of distributions approach.
#'
#' @details This function is called for every time period in the DiSCo function. It implements the DiSCo method for a single time period, as well as the mixture of distributions approach.
#' The corresponding results for each year can be accessed in the `years` list of the output of the DiSCo function. The DiSCo function returns the average weight for each unit across all years,
#' calculated as a uniform mean, as well as the counterfactual target distribution produced as the weighted average of the control distributions for each year, using these averaged weights.
#'
#' @param c_df List with matrices of control distributions
#' @param t_df Matrix containing the target distribution
#' @param T0 Integer indicating first year of treatment as counted from 1 (e.g, if treatment year 2002 was the 5th year in the sample, this parameter should be 5).
#' @param ww Optional vector of weights indicating the relative importance of each time period. If not specified, each time period is weighted equally.
#' @param peridx Optional integer indicating number of permutations. If not specified, by default equal to the number of units in the sample.
#' @param evgrid Optional vector containing an evenly spaced grid on [0,1] on which the quantile function for the control units will be evaulated.
#' By default, a grid of 100 points is used.
#' @param graph Boolean indicating whether to plot graphs
#' @param y_name Y axis label of the graph
#' @param x_name X axis label of the graph
#' @param num_cores Integer, number of cores to use for parallel computation. Set to 1 by default (sequential computation), this can be very slow!
#' @return A nested list with the following elements:
#' \itemize{
#' \item{DiSCo}{A list containing the results of the main (DiSCo) method, with the following elements:
#' \itemize{
#' \item{weights}{The optimal weights for the DiSCo method}
#' \item{quantile}{A list containing the quantile functions of the controls and the corresponding barycenter, with the following elements:}
#' \itemize{
#' \item{controls}{A vector containing the quantile functions of the controls}
#' \item{barycenter}{A vector containing the quantile function of the barycenter}
#' }
#' \item{cdf}{The empirical CDFs of the barycenters}
#' }
#' \item{mixture}{A list containing the results of the mixture of distributions approach, with the following elements:
#' \itemize{
#' \item{weights}{The optimal weights for the mixture of distributions approach}
#' \item{distance}{The value of the objective function for the mixture of distributions approach}
#' \item{mean}{The weighted mixture of the controls' CDFs, i.e. the "mixture CDF"}
#' }
#' \item{target}{A list containing the data for the target unit, with the following elements:}
#' \itemize{
#' \item{quantile}{A vector containing the quantile functions of the target}
#' \item{cdf}{A vector containing the empirical CDFs of the target}
#' \item{grid}{A vector containing the grid on which the quantile and CDF functions were evaluated}
#' \item{data}{A vector containing the supplied data for the target unit}
#' }
#' \item{controls}{A list containing the data for the control units, with the following elements:}
#' \itemize{
#' \item{data}{A vector containing the supplied data for the control units}
#' \item{cdf}{A vector containing the empirical CDFs of the controls}
#' \item{id}{A vector containing the IDs of the control units, in the same ordering as the weights returned in the DiSCo and mixture of distributions lists}
#' }
#' }
DiSCo_iter <- function(yy, df, id_col.target, M, G, ...) {
# obtaining the target state
# target outcome
target <- df[id_col == id_col.target, y_col]
# generate list where each element contains a list of all micro-level outcomes for a control unit
controls <- list()
j <- 1
controls.id <- unique(df[id_col != id_col.target, id_col])
for (id in controls.id) {
controls[j] <- list(df[id_col == id & t_col == yy, y_col])
j <- j + 1
}
# obtaining the optimal weights for the DiSCo method
DiSCo_res_weights <- DiSCo_weights_reg(controls,as.vector(target), M)
DiSCo_res2 <- DiSCo_bc(controls,DiSCo_res_weights,seq(from=0,to=1,length.out=M+1))
# sample grid
grid <- list(grid.min = NA, grid.max = NA, grid.rand = NA, grid.ord = NA)
grid[c("grid.min", "grid.max", "grid.rand", "grid.ord")] <- getGrid(target, controls, G)
# getting the CDF from the quantile function
DiSCo_res2.cdfF <- ecdf(DiSCo_res2[[2]])
DiSCo_res2.cdf <- DiSCo_res2.cdfF(grid$grid.ord)
# obtaining the optimal weights for the mixture of distributions method
mixture <- getMixture(controls, target, grid$grid.min, grid$grid.max, grid$grid.rand)
y_char <- as.character(yy)
results <- list()
results[["DiSCo"]] <-
list("weights" = DiSCo_res_weights, "quantile" = DiSCo_res2, "cdf" =  DiSCo_res2.cdf) # DiSCo estimator
results[["mixture"]] <- list("weights" = mixture$weights.opt, "distance" = mixture$distance.opt, "mean" = mixture$mean) # mixture of distributions estimator
results[["target"]] <- list("quantile" = target.s, "cdf" = mixture$target.order, "grid" =  grid.ord, "data" = as.vector(target))
results[["controls"]] <- list("data" = controls, "cdf" = mixture$CDF.matrix, "id" = controls.id)
}
results.years <- lapply(sort(unique(df$t_col)), DiSCo_iter, df = df, id_col.target = id_col.target, M = M, G = G) #, mc.cores = num.cores)
getMixture <- function(controls1, target, grid.min, grid.max, grid.rand) {
###### The mixture of distributions approach
# we again only focus on the first half of the data
# defining the grid on which we define the cumulative distribution functions
# obtaining the minimal and maximal values among all supports
# creating a list of controls with only the full data
# Estimating the empirical CDFs
CDF.control <- lapply(controls1,ecdf)
CDF.target <- ecdf(target)
# Evaluating the CDF on the random grid
CDF.matrix <- matrix(0,nrow=length(grid.rand), ncol = (length(controls1)+1))
CDF.matrix[,1] <- CDF.target(grid.rand)
for (ii in 1:length(controls1)){
CDF.matrix[,(ii+1)] <- CDF.control[[ii]](grid.rand)
}
# Solving the convex problem with CVXR
# the variable we are after
theweights <- Variable(length(controls1))
# the objective function
objective <- cvxr_norm((CDF.matrix[,2:ncol(CDF.matrix)] %*% theweights - CDF.matrix[,1]))
# the constraints for the unit simplex
constraints <- list(theweights>=0, sum_entries(theweights) == 1)
# the optimization problem
problem <- Problem(Minimize(objective),constraints)
# solving the optimization problem
results <- solve(problem, solver = "SCS")
# returning the optimal weights and the value function which provides the
# squared Wasserstein distance between the target and the corresponding barycenter
theweights.opt <- results$getValue(theweights)
thedistance.opt <- results$value*1/M*(grid.max - grid.min)
themean <- CDF.matrix[,2:ncol(CDF.matrix)]%*%theweights.opt
themean.order <- themean[order(grid.rand, decreasing=FALSE)]
target.order <- CDF.matrix[order(grid.rand, decreasing=FALSE),1]
return(list("weights.opt" = theweights.opt, "distance.opt" = thedistance.opt,
"mean" = themean.order, "target.order" = target.order, "cdf" = CDF.matrix))
}
getGrid <- function(target, controls1, G) {
grid.min <- min(c(min(target),unlist(lapply(controls1,min))))
grid.max <- max(c(max(target),unlist(lapply(controls1,max))))
# if grid.max-grid.min<=1 we round to the next 0.1.
grid.min <- floor(grid.min*10)/10
grid.max <- ceiling(grid.max*10)/10
# sampling uniformly on the grid
grid.rand <- runif(G,grid.min-0.25,grid.max+0.25)
# ordered grid
grid.ord <- grid.rand[order(grid.rand)]
return(list(grid.min, grid.max, grid.rand, grid.ord))
}
checks <- function(df, id_col.target, T0, M, G, num.cores, permutation) {
# checks on the input data
if (!id_col.target %in% df$id_col) {
stop("There is no row in the column `id_col` with the name specified in id_col.target!")
}
if (!"t_col" %in% names(df)) {
stop("t_col is not a column in the data table")
}
if (!"y_col" %in% names(df)) {
stop("y_col is not a column in the data table")
}
if (!"id_col" %in% names(df)) {
stop("id_col is not a column in the data table")
}
# checks on the input data types
if (!is.numeric(df$id_col)) {
stop("id_col must be numeric")
}
if (!is.integer(df$t_col)) {
stop("year_col must be integer")
}
if (!is.numeric(df$y_col)) {
stop("y_col must be numeric")
}
if (!is.numeric(T0)) {
stop("T0 must be integer")
}
if (!is.numeric(M)) {
stop("M must be numeric")
}
if (!is.integer(G)) {
stop("G must be integer")
}
if (!is.integer(num.cores)) {
stop("num.cores must be integer")
}
if (!is.logical(permutation)) {
stop("permutation must be logical")
}
# checks on the input data values
if (T0 < 1 | T0 > max(df$t_col)) {
stop("T0 must be between 1 and the maximum value of year_col")
}
if (M < 1) {
stop("M must be greater than or equal to 1")
}
if (num.cores < 1) {
stop("num.cores must be greater than or equal to 1")
}
# check that the number of cores is not greater than the number of available cores
if (num.cores > parallel::detectCores()) {
stop("num.cores cannot be greater than the number of available cores")
}
# check that the year_col is a sequence of integers starting at 1
if (!all(sort(unique(df$t_col)) == 1:max(df$t_col))) {
stop("t_col must be a sequence of integers starting at 1")
}
}
is.integer <- function(x) {
is.numeric(x) && all(x == as.integer(x))
}
# run the main function in parallel for each period (mclapply doesn't require a cluster so we will run this in parallel if num.cores > 1, but it won't work on windows)
start_time <- Sys.time()
results.years <- lapply(sort(unique(df$t_col)), DiSCo_iter, df = df, id_col.target = id_col.target, M = M, G = G) #, mc.cores = num.cores)
end <- Sys.time()
print(end - start_time)
#' @title DiSCo_iter
#'
#' @description This function implements the DiSCo method for a single time period, as well as the mixture of distributions approach.
#'
#' @details This function is called for every time period in the DiSCo function. It implements the DiSCo method for a single time period, as well as the mixture of distributions approach.
#' The corresponding results for each year can be accessed in the `years` list of the output of the DiSCo function. The DiSCo function returns the average weight for each unit across all years,
#' calculated as a uniform mean, as well as the counterfactual target distribution produced as the weighted average of the control distributions for each year, using these averaged weights.
#'
#' @param c_df List with matrices of control distributions
#' @param t_df Matrix containing the target distribution
#' @param T0 Integer indicating first year of treatment as counted from 1 (e.g, if treatment year 2002 was the 5th year in the sample, this parameter should be 5).
#' @param ww Optional vector of weights indicating the relative importance of each time period. If not specified, each time period is weighted equally.
#' @param peridx Optional integer indicating number of permutations. If not specified, by default equal to the number of units in the sample.
#' @param evgrid Optional vector containing an evenly spaced grid on [0,1] on which the quantile function for the control units will be evaulated.
#' By default, a grid of 100 points is used.
#' @param graph Boolean indicating whether to plot graphs
#' @param y_name Y axis label of the graph
#' @param x_name X axis label of the graph
#' @param num_cores Integer, number of cores to use for parallel computation. Set to 1 by default (sequential computation), this can be very slow!
#' @return A nested list with the following elements:
#' \itemize{
#' \item{DiSCo}{A list containing the results of the main (DiSCo) method, with the following elements:
#' \itemize{
#' \item{weights}{The optimal weights for the DiSCo method}
#' \item{quantile}{A list containing the quantile functions of the controls and the corresponding barycenter, with the following elements:}
#' \itemize{
#' \item{controls}{A vector containing the quantile functions of the controls}
#' \item{barycenter}{A vector containing the quantile function of the barycenter}
#' }
#' \item{cdf}{The empirical CDFs of the barycenters}
#' }
#' \item{mixture}{A list containing the results of the mixture of distributions approach, with the following elements:
#' \itemize{
#' \item{weights}{The optimal weights for the mixture of distributions approach}
#' \item{distance}{The value of the objective function for the mixture of distributions approach}
#' \item{mean}{The weighted mixture of the controls' CDFs, i.e. the "mixture CDF"}
#' }
#' \item{target}{A list containing the data for the target unit, with the following elements:}
#' \itemize{
#' \item{quantile}{A vector containing the quantile functions of the target}
#' \item{cdf}{A vector containing the empirical CDFs of the target}
#' \item{grid}{A vector containing the grid on which the quantile and CDF functions were evaluated}
#' \item{data}{A vector containing the supplied data for the target unit}
#' }
#' \item{controls}{A list containing the data for the control units, with the following elements:}
#' \itemize{
#' \item{data}{A vector containing the supplied data for the control units}
#' \item{cdf}{A vector containing the empirical CDFs of the controls}
#' \item{id}{A vector containing the IDs of the control units, in the same ordering as the weights returned in the DiSCo and mixture of distributions lists}
#' }
#' }
DiSCo_iter <- function(yy, df, id_col.target, M, G, ...) {
# obtaining the target state
# target outcome
target <- df[id_col == id_col.target, y_col]
# generate list where each element contains a list of all micro-level outcomes for a control unit
controls <- list()
j <- 1
controls.id <- unique(df[id_col != id_col.target, id_col])
for (id in controls.id) {
controls[j] <- list(df[id_col == id & t_col == yy, y_col])
j <- j + 1
}
# obtaining the optimal weights for the DiSCo method
DiSCo_res_weights <- DiSCo_weights_reg(controls,as.vector(target), M)
DiSCo_res2 <- DiSCo_bc(controls,DiSCo_res_weights,seq(from=0,to=1,length.out=M+1))
# sample grid
grid <- list(grid.min = NA, grid.max = NA, grid.rand = NA, grid.ord = NA)
grid[c("grid.min", "grid.max", "grid.rand", "grid.ord")] <- getGrid(target, controls, G)
# getting the CDF from the quantile function
DiSCo_res2.cdfF <- ecdf(DiSCo_res2[[2]])
DiSCo_res2.cdf <- DiSCo_res2.cdfF(grid$grid.ord)
# obtaining the optimal weights for the mixture of distributions method
mixture <- getMixture(controls, target, grid$grid.min, grid$grid.max, grid$grid.rand)
y_char <- as.character(yy)
results <- list()
results[["DiSCo"]] <-
list("weights" = DiSCo_res_weights, "quantile" = DiSCo_res2, "cdf" =  DiSCo_res2.cdf) # DiSCo estimator
results[["mixture"]] <- list("weights" = mixture$weights.opt, "distance" = mixture$distance.opt, "mean" = mixture$mean) # mixture of distributions estimator
results[["target"]] <- list("quantile" = target.s, "cdf" = mixture$target.order, "grid" =  grid.ord, "data" = as.vector(target))
results[["controls"]] <- list("data" = controls, "cdf" = mixture$CDF.matrix, "id" = controls.id)
}
sort(unique(df$t_col))
periods.before <- sort(unique(df$t_col))
periods.before <- periods.before[periods.before < T0]
periods.before
1997+7
1:7
